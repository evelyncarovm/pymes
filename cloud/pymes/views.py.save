from django.shortcuts import render, render_to_response, get_object_or_404
from django.http import HttpResponseRedirect, HttpResponse   
from django.contrib import auth, admin
from django.core.context_processors import csrf 
from django.core.urlresolvers import reverse
from django.template import RequestContext
from django.views.generic.list import ListView
from django.views.generic.edit import CreateView, UpdateView, DeleteView
from django.views.generic.detail import DetailView
from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.decorators import login_required
#from admin import LoanTAdmin

from forms import UserForm, LoanForm, ClientForm
from pymes.models import LoanType, Client, Record

def register(request):
    # Like before, get the request's context.
    context = RequestContext(request)

    # A boolean value for telling the template whether the registration was successful.
    # Set to False initially. Code changes value to True when registration succeeds.
    registered = False

    # If it's a HTTP POST, we're interested in processing form data.
    if request.method == 'POST':
        # Attempt to grab information from the raw form information.
        # Note that we make use of both UserForm and UserProfileForm.
        user_form = UserForm(data=request.POST)
        #profile_form = UserProfileForm(data=request.POST)

        # If the two forms are valid...
        if user_form.is_valid(): #and profile_form.is_valid():
            # Save the user's form data to the database.
            user = user_form.save()

            # Now we hash the password with the set_password method.
            # Once hashed, we can update the user object.
            user.set_password(user.password)
            user.save()

            registered = True

        # Invalid form or forms - mistakes or something else?
        # Print problems to the terminal.
        # They'll also be shown to the user.
        else:
            print user_form.errors, #profile_form.errors

    # Not a HTTP POST, so we render our form using two ModelForm instances.
    # These forms will be blank, ready for user input.
    else:
        user_form = UserForm()
        #profile_form = UserProfileForm()

    # Render the template depending on the context.
    return render_to_response(
            'pymes/register.html',
            {'user_form': user_form, 'registered': registered},
            context)

def user_login(request):
    # Like before, obtain the context for the user's request.
    context = RequestContext(request)

    # If the request is a HTTP POST, try to pull out the relevant information.
    if request.method == 'POST':
        # Gather the username and password provided by the user.
        # This information is obtained from the login form.
        username = request.POST['username']
        password = request.POST['password']

        # Use Django's machinery to attempt to see if the username/password
        # combination is valid - a User object is returned if it is.
        user = authenticate(username=username, password=password)

        # If we have a User object, the details are correct.
        # If None (Python's way of representing the absence of a value), no user
        # with matching credentials was found.
        if user:
            # Is the account active? It could have been disabled.
            if user.is_active:
                # If the account is valid and active, we can log the user in.
                # We'll send the user back to the homepage.
                login(request, user)
                return HttpResponseRedirect('/pymes/loans')
            else:
                # An inactive account was used - no logging in!
                return HttpResponse("Your pymes account is disabled.")
        else:
            # Bad login details were provided. So we can't log the user in.
            print "Invalid login details: {0}, {1}".format(username, password)
            return HttpResponse("Invalid login details supplied.")

    # The request is not a HTTP POST, so display the login form.
    # This scenario would most likely be a HTTP GET.
    else:
        # No context variables to pass to the template system, hence the
        # blank dictionary object...
        return render_to_response('pymes/login.html', {}, context)

@login_required
def user_logout(request):
    # Since we know the user is logged in, we can now just log them out.
    logout(request)

    # Take the user back to the homepage.
    return HttpResponseRedirect('/pymes/')

@login_required
def detail_records(request,idclient):
    context=RequestContext(request)
    record=Record.objects.filter(idloan=idclient)
    return render_to_response(
        'pymes/detail_records.html',context)

@login_required
def edit_loan(request,idloantype):
    context=RequestContext(request)
    loan=LoanType.objects.get(idloantype=idloantype)
    return render_to_response(
        'pymes/edit_loan.html',
        {'action': 'update/' + idloantype,
        'button': 'Update',
        'ltype': loan.ltype,
        'rate': loan.rate
        }, context
    )

@login_required
def update(request, idloantype):
    context=RequestContext(request)
    loan = LoanType.objects.get(idloantype=idloantype)
    #loan = LoanType(idadmin=request.user)
    # A HTTP POST?
    #form = LoanForm(request.POST or None, instance=loan)
    #form = LoanForm(data=request.POST)
    #if form.isvalid():
    created = True
    loan.ltype = request.POST["loantype_ltype"]
    loan.rate = request.POST["loantype_rate"]
    #loantype = form.save()#commit=False)
    loan.save()
#return list(request, message="Link updated!")
    #return render_to_response('pymes/edit_loan.html', context)
    return render_to_response('pymes/add_loan.html',{'created': created}, context)

@login_required
def delete(request, idloantype):
    context=RequestContext(request)
    loan = LoanType.objects.get(idloantype=idloantype).delete()
    created = True
    return render_to_response('pymes/add_loan.html',{'created': created}, context)

@login_required
def add_loan(request):
    # Get the context from the request.
    context = RequestContext(request)
    created = False
    loan = LoanType(idadmin=request.user)
    # A HTTP POST?
    form = LoanForm(request.POST or None, instance=loan)

    # Have we been provided with a valid form?
    if form.is_valid():
        # Save the new category to the database.
        loantype = form.save()#commit=False)
        loantype.save()
        created = True

        # Now call the index() view.
        # The user will be shown the homepage.
        #return index(request)
    else:
        # The supplied form contained errors - just print them to the terminal.
        print form.errors

    # Bad form (or form details), no form supplied...
    # Render the form with error messages (if any).
    return render_to_response('pymes/add_loan.html', {'form': form, 'created': created}, context)

def loan_req(request, slug):
    loantype = get_object_or_404(LoanType, slug=slug)
    form = ClientForm(request.POST or None)
    if form.is_valid():
        client = form.save(commit=False)
        client.loanpurpose = loantype
        client.save()
        return redirect('pymes/')

    return render_to_response('pymes/',
                              {
                                  'form': form,
                              },
                              context)

class LoanMixin(object):
    model = LoanType
    def get_context_data(self, **kwargs):
        kwargs.update({'object_name':'LoanType'})
        return kwargs

class LoanFormMixin(LoanMixin):
    form_class = LoanForm
    template_name = 'pymes/loan_form.html'

class LoanList(ListView):
    model = LoanType
    def get_queryset(self):
        queryset = super(LoanList, self).get_queryset().filter(idadmin=self.request.user)
        return queryset
        
class ClientList(ListView):
    model = Client
    def get_queryset(self):
        queryset = super(ClientList, self).get_queryset().filter(idadmin_id=self.request.user)
        return queryset

class RecordList(ListView):
    model = Record 
    def get_queryset(self):
        queryset = super(RecordList, self).get_queryset().filter(idclient_id=self.request.idclient)
        return queryset
